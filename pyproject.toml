[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "wd14-tagger-standalone"
version = "0.1.5"
description = "Library and CLI for WD14 image tagging with ONNX models - supports both programmatic use and command line interface"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "corkborg", email = "corkborg@users.noreply.github.com"},
    {name = "Allen Day", email = "allenday@users.noreply.github.com"}
]
maintainers = [
    {name = "corkborg", email = "corkborg@users.noreply.github.com"}
]
keywords = ["machine-learning", "image-classification", "onnx", "tagging", "waifu-diffusion", "library", "api", "computer-vision"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.11"
dependencies = [
    "numpy>=1.24.3,<2.0",
    "pandas>=2.2.0,<3.0",
    "Pillow>=11.0.0,<12.0",
    "huggingface-hub>=0.28.0,<1.0",
    "deepdanbooru>=1.0.3,<2.0",
    "onnxruntime>=1.16.0,<2.0",
    "opencv-python>=4.11.0,<5.0",
    "tqdm>=4.66.0,<5.0",
    "structlog>=24.1.0,<26.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "types-Pillow",
    "types-tqdm",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
]

[project.scripts]
wd14-tagger = "tagger.cli:main"

[project.urls]
Homepage = "https://github.com/corkborg/wd14-tagger-standalone"
Repository = "https://github.com/corkborg/wd14-tagger-standalone.git"
Issues = "https://github.com/corkborg/wd14-tagger-standalone/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["tagger*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.csv"]

# Black formatting
[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# Ruff linting
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
unfixable = ["B"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["E402"]

# MyPy type checking
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "deepdanbooru.*",
    "onnxruntime.*",
    "cv2.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["tagger"]
omit = [
    "tests/*",
    "venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
